// <auto-generated />
using System;
using BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(BeanFastContext))]
    partial class BeanFastContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Area", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK_Area");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.CardType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK_CardType");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("CardType", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Category");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MasterFoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Combo");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MasterFoodId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Combo", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ExchangeGift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_ExchangeGift");

                    b.HasIndex("CreatorId");

                    b.HasIndex("GiftId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SessionDetailId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("ExchangeGift", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCombo")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Food");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Food", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Game");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Gift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Gift");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Gift", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Kitchen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Kitchen");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Kitchen", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Location");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.LoyaltyCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BackgroundImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CardTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_LoyaltyCard");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("LoyaltyCard", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Menu");

                    b.HasIndex("CreatorId");

                    b.HasIndex("KitchenId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.MenuDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_MenuDetail");

                    b.HasIndex("FoodId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Notification");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.NotificationDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_NotificationDetail");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DelivererId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RewardPoints")
                        .HasColumnType("int");

                    b.Property<Guid>("SessionDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Order");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SessionDetailId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExchangeGiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_OrderActivity");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ExchangeGiftId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("OrderActivity", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_OrderDetail");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("CurrentBMI")
                        .HasColumnType("float");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("NickName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Profile");

                    b.HasIndex("SchoolId");

                    b.HasIndex("UserId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ProfileBodyMassIndex", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK_ProfileBodyMassIndex");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileBodyMassIndex", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Role");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("KitchenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_School");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("KitchenId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("School", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeliveryStartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Session");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.SessionDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_SessionDetail");

                    b.HasIndex("LocationId");

                    b.HasIndex("SessionId");

                    b.ToTable("SessionDetail", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.SessionDetailDeliverer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DelivererId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_SessionDetailDeliverer");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DelivererId");

                    b.HasIndex("SessionDetailId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("SessionDetailDeliverer", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.SmsOtp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SmsOtp");
                });

            modelBuilder.Entity("BusinessObjects.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ExchangeGiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Transaction");

                    b.HasIndex("ExchangeGiftId");

                    b.HasIndex("GameId");

                    b.HasIndex("OrderId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("QrCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdaterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdaterId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Wallet");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Area", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedAreas")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Area_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedAreas")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Area_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.CardType", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedCardTypes")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_CardType_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedCardTypes")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_CardType_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedCategories")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Category_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedCategories")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Category_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Combo", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedCombos")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Combo_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.Food", "Food")
                        .WithMany("Combos")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Combo_Food");

                    b.HasOne("BusinessObjects.Models.Food", "MasterFood")
                        .WithMany("MasterCombos")
                        .HasForeignKey("MasterFoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Combo_MasterFood");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedCombos")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Combo_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Food");

                    b.Navigation("MasterFood");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.ExchangeGift", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedExchangeGifts")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_ExchangeGift_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.Gift", "Gift")
                        .WithMany("ExchangeGifts")
                        .HasForeignKey("GiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ExchangeGift_Gift");

                    b.HasOne("BusinessObjects.Models.Profile", "Profile")
                        .WithMany("ExchangeGifts")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ExchangeGift_Profile");

                    b.HasOne("BusinessObjects.Models.SessionDetail", "SessionDetail")
                        .WithMany("ExchangeGifts")
                        .HasForeignKey("SessionDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ExchangeGift_SessionDetail");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedExchangeGifts")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_ExchangeGift_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Gift");

                    b.Navigation("Profile");

                    b.Navigation("SessionDetail");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Food", b =>
                {
                    b.HasOne("BusinessObjects.Models.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Food_Category");

                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedFoods")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Food_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedFoods")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Food_User_UpdaterId");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Game", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedGames")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Game_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedGames")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Game_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Gift", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedGifts")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Gift_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedGifts")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Gift_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Kitchen", b =>
                {
                    b.HasOne("BusinessObjects.Models.Area", "Area")
                        .WithMany("Kitchens")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Kitchen_Area");

                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedKitchens")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Kitchen_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedKitchens")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Kitchen_User_UpdaterId");

                    b.Navigation("Area");

                    b.Navigation("Creator");

                    b.Navigation("Manager");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Location", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedLocations")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Location_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.School", "School")
                        .WithMany("Locations")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Location_School");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedLocations")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Location_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("School");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.LoyaltyCard", b =>
                {
                    b.HasOne("BusinessObjects.Models.CardType", "CardType")
                        .WithMany("LoyaltyCards")
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_LoyaltyCard_CardType");

                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedLoyaltyCards")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_LoyaltyCard_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.Profile", "Profile")
                        .WithMany("LoyaltyCards")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_LoyaltyCard_Profile");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedLoyaltyCards")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_LoyaltyCard_User_UpdaterId");

                    b.Navigation("CardType");

                    b.Navigation("Creator");

                    b.Navigation("Profile");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Menu", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedMenus")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Menu_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.Kitchen", "Kitchen")
                        .WithMany("Menus")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu_Kitchen");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedMenus")
                        .HasForeignKey("UpdaterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Menu_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Kitchen");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.MenuDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Food", "Food")
                        .WithMany("MenuDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MenuDetail_Food");

                    b.HasOne("BusinessObjects.Models.Menu", "Menu")
                        .WithMany("MenuDetails")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MenuDetail_Menu");

                    b.Navigation("Food");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("BusinessObjects.Models.NotificationDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Notification", "Notification")
                        .WithMany("NotificationDetails")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationDetail_Notification");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("NotificationDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NotificationDetail_User");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedOrders")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Order_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObjects.Models.Profile", "Profile")
                        .WithMany("Orders")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Profile");

                    b.HasOne("BusinessObjects.Models.SessionDetail", "SessionDetail")
                        .WithMany("Orders")
                        .HasForeignKey("SessionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_SessionDetail");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedOrders")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Order_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Deliverer");

                    b.Navigation("Profile");

                    b.Navigation("SessionDetail");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderActivity", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedOrderActivities")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_OrderActivity_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.ExchangeGift", "ExchangeGift")
                        .WithMany("Activities")
                        .HasForeignKey("ExchangeGiftId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_OrderActivity_ExchangeGift");

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderActivities")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderActivity_Order");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedOrderActivities")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_OrderActivity_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("ExchangeGift");

                    b.Navigation("Order");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.OrderDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Food", "Food")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Food");

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BusinessObjects.Models.Profile", b =>
                {
                    b.HasOne("BusinessObjects.Models.School", "School")
                        .WithMany("Profiles")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Profile_School");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Profile_User");

                    b.Navigation("School");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.ProfileBodyMassIndex", b =>
                {
                    b.HasOne("BusinessObjects.Models.Profile", "Profile")
                        .WithMany("BMIs")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProfileBodyMassIndex_Profile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("BusinessObjects.Models.School", b =>
                {
                    b.HasOne("BusinessObjects.Models.Area", "Area")
                        .WithMany("PrimarySchools")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_School_Area");

                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedSchools")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_School_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.Kitchen", "Kitchen")
                        .WithMany("PrimarySchools")
                        .HasForeignKey("KitchenId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_School_Kitchen");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedSchools")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_School_User_UpdaterId");

                    b.Navigation("Area");

                    b.Navigation("Creator");

                    b.Navigation("Kitchen");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Session", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedSessions")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_Session_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.Menu", "Menu")
                        .WithMany("Sessions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Session_Menu");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedSessions")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_Session_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Menu");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.SessionDetail", b =>
                {
                    b.HasOne("BusinessObjects.Models.Location", "Location")
                        .WithMany("SessionDetails")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SessionDetail_Location");

                    b.HasOne("BusinessObjects.Models.Session", "Session")
                        .WithMany("SessionDetails")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_SessionDetail_Session");

                    b.Navigation("Location");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BusinessObjects.Models.SessionDetailDeliverer", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedSessionDetailDeliverer")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_SessionDetailDeliverer_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.User", "Deliverer")
                        .WithMany("SessionDetailDeliverers")
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SessionDetailDeliverer_User");

                    b.HasOne("BusinessObjects.Models.SessionDetail", "SessionDetail")
                        .WithMany("SessionDetailDeliverers")
                        .HasForeignKey("SessionDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SessionDetailDeliverer_SessionDetail");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedSessionDetailDeliverer")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_SessionDetailDeliverer_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Deliverer");

                    b.Navigation("SessionDetail");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.SmsOtp", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("SmsOtps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Transaction", b =>
                {
                    b.HasOne("BusinessObjects.Models.ExchangeGift", "ExchangeGift")
                        .WithMany("Transactions")
                        .HasForeignKey("ExchangeGiftId")
                        .HasConstraintName("FK_Transaction_ExchangeGift");

                    b.HasOne("BusinessObjects.Models.Game", "Game")
                        .WithMany("Transactions")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_Transaction_Game");

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Transaction_Order");

                    b.HasOne("BusinessObjects.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Transaction_Wallet");

                    b.Navigation("ExchangeGift");

                    b.Navigation("Game");

                    b.Navigation("Order");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Creator")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("FK_User_User_CreatorId");

                    b.HasOne("BusinessObjects.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.HasOne("BusinessObjects.Models.User", "Updater")
                        .WithMany("UpdatedUsers")
                        .HasForeignKey("UpdaterId")
                        .HasConstraintName("FK_User_User_UpdaterId");

                    b.Navigation("Creator");

                    b.Navigation("Role");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("BusinessObjects.Models.Wallet", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Wallet_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Area", b =>
                {
                    b.Navigation("Kitchens");

                    b.Navigation("PrimarySchools");
                });

            modelBuilder.Entity("BusinessObjects.Models.CardType", b =>
                {
                    b.Navigation("LoyaltyCards");
                });

            modelBuilder.Entity("BusinessObjects.Models.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("BusinessObjects.Models.ExchangeGift", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Food", b =>
                {
                    b.Navigation("Combos");

                    b.Navigation("MasterCombos");

                    b.Navigation("MenuDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.Game", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Gift", b =>
                {
                    b.Navigation("ExchangeGifts");
                });

            modelBuilder.Entity("BusinessObjects.Models.Kitchen", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("PrimarySchools");
                });

            modelBuilder.Entity("BusinessObjects.Models.Location", b =>
                {
                    b.Navigation("SessionDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.Menu", b =>
                {
                    b.Navigation("MenuDetails");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Notification", b =>
                {
                    b.Navigation("NotificationDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Navigation("OrderActivities");

                    b.Navigation("OrderDetails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Profile", b =>
                {
                    b.Navigation("BMIs");

                    b.Navigation("ExchangeGifts");

                    b.Navigation("LoyaltyCards");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.School", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("BusinessObjects.Models.Session", b =>
                {
                    b.Navigation("SessionDetails");
                });

            modelBuilder.Entity("BusinessObjects.Models.SessionDetail", b =>
                {
                    b.Navigation("ExchangeGifts");

                    b.Navigation("Orders");

                    b.Navigation("SessionDetailDeliverers");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("CreatedAreas");

                    b.Navigation("CreatedCardTypes");

                    b.Navigation("CreatedCategories");

                    b.Navigation("CreatedCombos");

                    b.Navigation("CreatedExchangeGifts");

                    b.Navigation("CreatedFoods");

                    b.Navigation("CreatedGames");

                    b.Navigation("CreatedGifts");

                    b.Navigation("CreatedKitchens");

                    b.Navigation("CreatedLocations");

                    b.Navigation("CreatedLoyaltyCards");

                    b.Navigation("CreatedMenus");

                    b.Navigation("CreatedOrderActivities");

                    b.Navigation("CreatedOrders");

                    b.Navigation("CreatedSchools");

                    b.Navigation("CreatedSessionDetailDeliverer");

                    b.Navigation("CreatedSessions");

                    b.Navigation("CreatedUsers");

                    b.Navigation("NotificationDetails");

                    b.Navigation("Profiles");

                    b.Navigation("SessionDetailDeliverers");

                    b.Navigation("SmsOtps");

                    b.Navigation("UpdatedAreas");

                    b.Navigation("UpdatedCardTypes");

                    b.Navigation("UpdatedCategories");

                    b.Navigation("UpdatedCombos");

                    b.Navigation("UpdatedExchangeGifts");

                    b.Navigation("UpdatedFoods");

                    b.Navigation("UpdatedGames");

                    b.Navigation("UpdatedGifts");

                    b.Navigation("UpdatedKitchens");

                    b.Navigation("UpdatedLocations");

                    b.Navigation("UpdatedLoyaltyCards");

                    b.Navigation("UpdatedMenus");

                    b.Navigation("UpdatedOrderActivities");

                    b.Navigation("UpdatedOrders");

                    b.Navigation("UpdatedSchools");

                    b.Navigation("UpdatedSessionDetailDeliverer");

                    b.Navigation("UpdatedSessions");

                    b.Navigation("UpdatedUsers");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("BusinessObjects.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
